import 'package:evote/pages/createVoting/multi_form.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'dart:io';
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'package:image_picker/image_picker.dart';
import 'package:evote/pages/createVoting/create_voting2.dart';
import 'package:evote/pages/createVoting/multi_form.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:syncfusion_flutter_charts/charts.dart';

class Autogenerated {
  Data? data;
  Meta? meta;

  Autogenerated({this.data, this.meta});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    data = json['data'] != null ? new Data.fromJson(json['data']) : null;
    meta = json['meta'] != null ? new Meta.fromJson(json['meta']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.data != null) {
      data['data'] = this.data!.toJson();
    }
    if (this.meta != null) {
      data['meta'] = this.meta!.toJson();
    }
    return data;
  }
}

class Data {
  int? id;
  Attributes? attributes;

  Data({this.id, this.attributes});

  Data.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    attributes = json['attributes'] != null
        ? new Attributes.fromJson(json['attributes'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    if (this.attributes != null) {
      data['attributes'] = this.attributes!.toJson();
    }
    return data;
  }
}

class Attributes {
  String? startedDate;
  String? finishedDate;
  String? createdAt;
  String? updatedAt;
  String? publishedAt;
  String? nama;
  Calon? calon;

  Attributes(
      {this.startedDate,
      this.finishedDate,
      this.createdAt,
      this.updatedAt,
      this.publishedAt,
      this.nama,
      this.calon});

  Attributes.fromJson(Map<String, dynamic> json) {
    startedDate = json['started_date'];
    finishedDate = json['finished_date'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    publishedAt = json['publishedAt'];
    nama = json['Nama'];
    calon = json['calon'] != null ? new Calon.fromJson(json['calon']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['started_date'] = this.startedDate;
    data['finished_date'] = this.finishedDate;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['publishedAt'] = this.publishedAt;
    data['Nama'] = this.nama;
    if (this.calon != null) {
      data['calon'] = this.calon!.toJson();
    }
    return data;
  }
}

class Calon {
  late List<DataCalon> data;

  Calon({required this.data});

  Calon.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      data = <DataCalon>[];
      json['data'].forEach((v) {
        data.add(new DataCalon.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.data != null) {
      data['data'] = this.data.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class DataCalon {
  int? id;
  AttributesCalon? attributes;

  DataCalon({this.id, this.attributes});

  DataCalon.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    attributes = json['attributes'] != null
        ? new AttributesCalon.fromJson(json['attributes'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    if (this.attributes != null) {
      data['attributes'] = this.attributes!.toJson();
    }
    return data;
  }
}

class AttributesCalon {
  late String nama;
  late String deskripsi;
  late int jumlahVote;
  late String createdAt;
  late String updatedAt;
  late String publishedAt;

  AttributesCalon(
      {required this.nama,
      required this.deskripsi,
      required this.jumlahVote,
      required this.createdAt,
      required this.updatedAt,
      required this.publishedAt});

  AttributesCalon.fromJson(Map<String, dynamic> json) {
    nama = json['Nama'];
    deskripsi = json['Deskripsi'];
    jumlahVote = json['Jumlah_vote'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    publishedAt = json['publishedAt'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['Nama'] = this.nama;
    data['Deskripsi'] = this.deskripsi;
    data['Jumlah_vote'] = this.jumlahVote;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['publishedAt'] = this.publishedAt;
    return data;
  }
}

class Meta {
  Meta();

  Meta.fromJson(Map<String, dynamic> json) {}

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    return data;
  }
}

void main() => runApp(const ManageVoting());

class ManageVoting extends StatelessWidget {
  const ManageVoting({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Create Voting 1';
    return MaterialApp(
      title: appTitle,
      home: Scaffold(
        backgroundColor: Color.fromARGB(1000, 6, 48, 75),
        // appBar: AppBar(
        //   leading: const Icon(Icons.chevron_left),
        //   backgroundColor: Color.fromARGB(1000, 6, 48, 75),
        //   foregroundColor: Colors.white,
        // ),
        body: const SingleChildScrollView(
          child: ManageVote(),
        ),
      ),
    );
  }
}

class ManageVote extends StatefulWidget {
  const ManageVote({Key? key}) : super(key: key);

  @override
  ManageVoteState createState() {
    return ManageVoteState();
  }
}

class ManageVoteState extends State<ManageVote> with AutomaticKeepAliveClientMixin {
  // late List<Data>? data = _votings.data;
  late final _votings;
  late num total_vote = 0;
  late List<dataVoting> _chartData;
  bool isLoading=false;
  // late final vote;
  @override
  void initState() {
    
     isLoading=true;
    _populateVoting();
    super.initState();
    // _chartData = getChartData();
    // print('data ${data}');
  }
  List<dataVoting> getChartData()  {
    final List<dataVoting> chartData = [];
    for (var i=0;i<_votings.data.length;i++){
      var test= dataVoting('${_votings.data.attributes.nama}', _votings.data.attributes.jumlahVote);
      chartData.add(test);
    }
    return chartData;
  }

  void _populateVoting() async {
    // late final _votings;
    final votings = await _fetchAllVotings();
    setState(() {
      _votings = votings!;
      print(_votings.data);
      for (var i = 0; i < _votings.data.length; i++) {
        total_vote += _votings.data[i].attributes!.jumlahVote;
      }
      print(total_vote);
    });
    isLoading=false;
  }

  Future _fetchAllVotings() async {
    final response = await http.get(
      Uri.parse("http://20.78.59.91/api/votings/21?populate[0]=calon"),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
    );

    if (response.statusCode == 200) {
      final result = Autogenerated.fromJson(json.decode(response.body));
      print(result.data!.id);
      // return result.map((item) => Autogenerated.fromJson(item)).toList();
      return result.data!.attributes!.calon;
    } else {
      throw Exception("Failed to load movies");
    }
  }

  @override
  Widget build(BuildContext context) {
    super.build(context);
    if(isLoading){return Scaffold();}
    else{
    return Container(
        padding: EdgeInsets.all(26),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              Container(
                padding: EdgeInsets.fromLTRB(0, 10, 0, 0),
                child: const Icon(
                  Icons.chevron_left,
                  color: Colors.white,
                ),
              ),
              Container(
                padding: EdgeInsets.fromLTRB(0, 10, 0, 0),
                child: Center(
                  child: Text('Nama Voting',
                      style: TextStyle(
                          fontFamily: 'Poppins',
                          fontSize: 24,
                          color: Colors.white)),
                ),
              ),
              Container(
                padding: EdgeInsets.fromLTRB(0, 25, 0, 0),
                child: Center(
                  child: Text('Persentase pemilih',
                      style: TextStyle(
                          fontFamily: 'Poppins',
                          fontSize: 14,
                          color: Colors.white)),
                ),
              ),
              Container(
                padding: EdgeInsets.fromLTRB(0, 10, 0, 0),
                child: Center(
                  child: Text('90%',
                      style: TextStyle(
                          fontFamily: 'Poppins',
                          fontSize: 24,
                          color: Colors.white)),
                ),
              ),
              // SfCircularChart(
              //   legend: Legend(
              //       isVisible: true, overflowMode: LegendItemOverflowMode.wrap, backgroundColor: Colors.white, ),
              //   series: <CircularSeries>[
              //     PieSeries<dataVoting, String>(
              //         dataSource: _chartData,
              //         xValueMapper: (dataVoting data, _) => data.nama_calon,
              //         yValueMapper: (dataVoting data, _) => data.jumlahVoting,
              //         dataLabelSettings: DataLabelSettings(isVisible: true),
              //        )
              //   ],
              // ),
              Padding(padding: EdgeInsets.fromLTRB(0, 15, 0, 10)),
              Container(
                padding: EdgeInsets.fromLTRB(0, 10, 0, 0),
                child: Center(
                    child: Row(
                  children: [
                    Container(
                      width: 180,
                      padding: EdgeInsets.fromLTRB(
                          60, 0, 0, 0), //apply padding to all four sides
                      child: Text(
                        'Nama',
                        style: TextStyle(
                            fontFamily: 'Poppins',
                            fontWeight: FontWeight.w400,
                            fontSize: 16,
                            color: Colors.white),
                      ),
                    ),
                    Container(
                      width: 80,
                      child: Text(
                        'Jumlah pemilih',
                        style: TextStyle(
                            fontFamily: 'Poppins',
                            fontWeight: FontWeight.w400,
                            fontSize: 16,
                            color: Colors.white),
                      ),
                    ),
                    Container(
                      // padding: EdgeInsets.fromLTRB(0, 0, 30, 0), //apply padding to all four sides
                      width: 80,
                      child: Text(
                        'persentase',
                        style: TextStyle(
                            fontFamily: 'Poppins',
                            fontWeight: FontWeight.w400,
                            fontSize: 16,
                            color: Colors.white),
                      ),
                    ),
                  ],
                )),
              ),
              Padding(padding: EdgeInsets.fromLTRB(0, 10, 0, 0)),
              ListView.separated(
                shrinkWrap: true,
                itemCount: _votings.data.length,
                itemBuilder: (context, i) {
                  return Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: Colors.white,
                    ),
                    padding: EdgeInsets.fromLTRB(0, 10, 0, 0),
                    height: 50,
                    child: Row(
                      // mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Container(
                          width: 200,
                          padding: EdgeInsets.fromLTRB(
                              60, 0, 0, 0), //apply padding to all four sides
                          child: Text(
                            _votings.data[i].attributes!.nama,
                            // 'test',
                            style: TextStyle(
                                fontFamily: 'Poppins',
                                fontWeight: FontWeight.w400,
                                fontSize: 16,
                                color: Colors.black),
                          ),
                        ),
                        Container(
                          width: 80,
                          child: Text(
                            _votings.data[i].attributes!.jumlahVote == null
                                ? "0"
                                : (_votings.data[i].attributes!.jumlahVote)
                                    .toString(),
                            style: TextStyle(
                                fontFamily: 'Poppins',
                                fontWeight: FontWeight.w400,
                                fontSize: 16,
                                color: Colors.black),
                          ),
                        ),
                        Container(
                          // padding: EdgeInsets.fromLTRB(0, 0, 30, 0), //apply padding to all four sides
                          width: 80,
                          child: Text(
                            (((_votings.data[i].attributes!.jumlahVote /
                                            total_vote *
                                            100)
                                        .round())
                                    .toString()) +
                                '%',
                            style: TextStyle(
                                fontFamily: 'Poppins',
                                fontWeight: FontWeight.w400,
                                fontSize: 16,
                                color: Colors.black),
                          ),
                        ),
                      ],
                    ),
                  );
                },
                separatorBuilder: (BuildContext context, int index) =>
                    const Divider(),
              )
            ],
          ),
        ));}
  }
  
  @override
  bool get wantKeepAlive => true;

  
}

class dataVoting {
  dataVoting(this.nama_calon, this.jumlahVoting);
  final String nama_calon;
  final int jumlahVoting;
}
