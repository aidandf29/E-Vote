import 'package:evote/components/candidate_card.dart';
import 'package:evote/pages/home.dart';
import 'package:evote/pages/manage_vote.dart';
import 'package:evote/pages/scan_fingerprint_auth.dart';
// import 'dart:js';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:get/get_connect/http/src/utils/utils.dart';
import 'package:http/http.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:evote/pages/scan_fingerprint_auth_voting.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../../components/candidate_dummy.dart';
import '../landing.dart';

class Autogenerated {
  Data? data;
  Meta? meta;

  Autogenerated({this.data, this.meta});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    data = json['data'] != null ? new Data.fromJson(json['data']) : null;
    meta = json['meta'] != null ? new Meta.fromJson(json['meta']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.data != null) {
      data['data'] = this.data!.toJson();
    }
    if (this.meta != null) {
      data['meta'] = this.meta!.toJson();
    }
    return data;
  }
}

class Data {
  int? id;
  Attributes? attributes;

  Data({this.id, this.attributes});

  Data.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    attributes = json['attributes'] != null
        ? new Attributes.fromJson(json['attributes'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    if (this.attributes != null) {
      data['attributes'] = this.attributes!.toJson();
    }
    return data;
  }
}

class Attributes {
  String? startedDate;
  String? finishedDate;
  String? createdAt;
  String? updatedAt;
  String? publishedAt;
  String? nama;
  Calon? calon;

  Attributes(
      {this.startedDate,
      this.finishedDate,
      this.createdAt,
      this.updatedAt,
      this.publishedAt,
      this.nama,
      this.calon});

  Attributes.fromJson(Map<String, dynamic> json) {
    startedDate = json['started_date'];
    finishedDate = json['finished_date'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    publishedAt = json['publishedAt'];
    nama = json['Nama'];
    calon = json['calon'] != null ? new Calon.fromJson(json['calon']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['started_date'] = this.startedDate;
    data['finished_date'] = this.finishedDate;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['publishedAt'] = this.publishedAt;
    data['Nama'] = this.nama;
    if (this.calon != null) {
      data['calon'] = this.calon!.toJson();
    }
    return data;
  }
}

class Calon {
  List<DataCalon>? data;

  Calon({this.data});

  Calon.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      data = <DataCalon>[];
      json['data'].forEach((v) {
        data!.add(new DataCalon.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class DataCalon {
  int? id;
  AttributesCalon? attributes;

  DataCalon({this.id, this.attributes});

  DataCalon.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    attributes = json['attributes'] != null
        ? new AttributesCalon.fromJson(json['attributes'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    if (this.attributes != null) {
      data['attributes'] = this.attributes!.toJson();
    }
    return data;
  }
}

class AttributesCalon {
  String? nama;
  String? deskripsi;
  int? jumlahVote;
  String? createdAt;
  String? updatedAt;
  String? publishedAt;

  AttributesCalon(
      {this.nama,
      this.deskripsi,
      this.jumlahVote,
      this.createdAt,
      this.updatedAt,
      this.publishedAt});

  AttributesCalon.fromJson(Map<String, dynamic> json) {
    nama = json['Nama'];
    deskripsi = json['Deskripsi'];
    jumlahVote = json['Jumlah_vote'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    publishedAt = json['publishedAt'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['Nama'] = this.nama;
    data['Deskripsi'] = this.deskripsi;
    data['Jumlah_vote'] = this.jumlahVote;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['publishedAt'] = this.publishedAt;
    return data;
  }
}

class Meta {
  Meta();

  Meta.fromJson(Map<String, dynamic> json) {}

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    return data;
  }
}

class CandidateChoose extends StatefulWidget {
  late final int? choose;

  CandidateChoose({required this.choose});
  @override
  _CandidateChoose createState() => _CandidateChoose();
}

class _CandidateChoose extends State<CandidateChoose> {
  int selectedIndex = 0;
  List<DataCalon>? items = <DataCalon>[];
  var choose;
  var jumlah;
  late SharedPreferences prefs;
  late String? stringValue;
  late int? intValue;
  Future get() async {
    prefs = await SharedPreferences.getInstance();

    stringValue = prefs.getString('email');
    intValue = prefs.getInt('id');
    print('test1 ${intValue}');
    var jsonResponse = null;
    final response = await http.get(
      Uri.parse(
          "http://20.78.59.91/api/votings/${widget.choose}?populate[0]=calon"),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
    );
    jsonResponse = (response.body);
    final test = Autogenerated.fromJson(json.decode(response.body));

    // var jsonValue = json.decode(jsonResponse['meta']);
    Map<Object, dynamic> user = jsonDecode(jsonResponse);
    // Map<Object, dynamic> user1 = jsonEncode(user['data'][0]);
    // print(user1['name']);

    if (user['data'].length == 0) {
      // ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      //   content: const Text('Failed to Sign In'),
      //   duration: const Duration(seconds: 1),
      // ));
      print("login not success");
    } else {
      print(stringValue);
      print(intValue);
      items = test.data?.attributes?.calon!.data;
      // print(jsonResponse.data[0].nama);
      // Navigator.pushReplacementNamed(context, '/');
    }
  }

  post(BuildContext context) async {
    var jsonResponse = null;
    jumlah == null ? jumlah = 0 : jumlah;
    print('test ${intValue}');

    final response = await http.put(
      Uri.parse("http://20.78.59.91/api/data-calons/${choose}"),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<Object, dynamic>{
        "data": {"Jumlah_vote": jumlah + 1}
      }),
    );
    final response_vote = await http.put(
      Uri.parse("http://20.78.59.91/api/votings/${widget.choose}"),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<Object, dynamic>{
        "data": {"already_voters": intValue}
      }),
    );
    jsonResponse = (response.body);
    Map<Object, dynamic> user = jsonDecode(jsonResponse);
    // var jsonValue = json.decode(jsonResponse['meta']);
    // Map<Object, dynamic> user = jsonDecode(jsonResponse);
    // Map<Object, dynamic> user1 = jsonEncode(user['data'][0]);
    print(jsonResponse);

    if (user['data'] == null) {
      print('gagal');
    } else {
      print("vote success");
      Navigator.pushReplacementNamed(context, '/landing');
    }
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
        child: FutureBuilder(
            future: get(),
            builder: (BuildContext context, AsyncSnapshot<dynamic> snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(
                  child: CircularProgressIndicator(),
                );
              } else {
                return Scaffold(
                  // back button

                  // appBar: AppBar(
                  //   backgroundColor: Color(0xFF0094B6),
                  //   leading: IconButton(
                  //       onPressed: () {
                  //         // post(context);
                  //         Navigator.pushReplacement(
                  //             context,
                  //             MaterialPageRoute(
                  //                 builder: (BuildContext context) =>
                  //                     LandingPage()));
                  //       },
                  //       icon: Icon(Icons.arrow_back)),
                  // ),
                  backgroundColor: Color(0xFF0094B6),
                  body: Container(
                      alignment: Alignment.center,
                      child: Column(
                        children: [
                          Padding(padding: EdgeInsets.only(top: 50)),
                          Container(
                              height: 80,
                              width: 360,
                              child: Text("Tentukan Pilihanmu",
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 30))),
                          Container(
                              height: 480,
                              width: 300,
                              alignment: Alignment.center,
                              child: ListView.builder(
                                scrollDirection: Axis.vertical,
                                itemCount: items?.length,
                                itemBuilder: (context, index) {
                                  if (index < items!.length) {
                                    final item = items![index];
                                    return listItem(item, index);
                                  } else {
                                    return Text("X");
                                  }
                                },
                              )),
                          Padding(padding: EdgeInsets.only(top: 20)),
                          Container(
                            child: Row(
                              children: [
                                Container(
                                  child: MaterialButton(
                                    padding: EdgeInsets.only(left: 70),
                                    onPressed: () {
                                      // post(context);
                                      Navigator.pushReplacement(
                                          context,
                                          MaterialPageRoute(
                                              builder: (BuildContext context) =>
                                                  LandingPage()));
                                    },
                                    child: Icon(
                                      Icons.arrow_back,
                                      color: Colors.white,
                                      size: 40,
                                    ),
                                  ),
                                ),
                                Container(
                                  padding: EdgeInsets.only(left: 150),
                                  child: MaterialButton(
                                    onPressed: () {
                                      post(context);
                                      // Navigator.pushReplacement(
                                      //     context,
                                      //     MaterialPageRoute(
                                      //         builder: (BuildContext context) =>
                                      //             FingerprintAuthVoting(
                                      //               jumlah: jumlah,
                                      //               intValue: intValue,
                                      //               choose: choose,
                                      //               pilih: widget.choose,
                                      //             )));
                                    },
                                    padding: EdgeInsets.all(10),
                                    child: Container(
                                      alignment: Alignment.center,
                                      height: 40,
                                      width: 100,
                                      decoration: BoxDecoration(
                                          borderRadius:
                                              BorderRadius.circular(10),
                                          color: Color(0xFFFFCE3F)),
                                      child: Text(
                                        "Lanjut",
                                        style: TextStyle(
                                            fontSize: 18,
                                            fontWeight: FontWeight.w600),
                                        textAlign: TextAlign.center,
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          )
                        ],
                      )),
                );
              }
            }));
  }

  Widget listItem(DataCalon item, int index) {
    return Container(
      padding: EdgeInsets.all(5),
      child: InkWell(
        onTap: () {
          setState(() {
            selectedIndex = index;
          });
          choose = item.id;
          jumlah = item.attributes?.jumlahVote;
          print(jumlah);
        },
        child: (Container(
          padding: EdgeInsets.all(15),
          height: 220,
          width: 270,
          decoration: BoxDecoration(
            color:
                selectedIndex == index ? Color(0xFF05304B) : Color(0xFF021826),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Column(children: [
            Container(
              alignment: Alignment.topLeft,
              child: Text(
                'Nomor Urut ${index + 1}',
                style: TextStyle(color: Colors.white, fontSize: 20),
              ),
            ),
            Padding(
              padding: EdgeInsets.only(top: 10),
            ),
            Container(
              height: 120,
              width: 120,
              decoration: BoxDecoration(
                  border: Border.all(color: Colors.white, width: 3),
                  image: DecorationImage(
                      image: AssetImage('assets/image/capres1.jpg'),
                      fit: BoxFit.contain)),
            ),
            Padding(padding: EdgeInsets.only(top: 15)),
            Container(
              child: Text(
                item.attributes!.nama!.length < 30
                    ? item.attributes!.nama!
                    : "${item.attributes!.nama!.substring(0, 28)}..",
                style: TextStyle(color: Colors.white, fontSize: 16),
              ),
            ),
          ]),
        )),
      ),
    );
  }
}
