import 'package:evote/pages/letsVote/chose_candidate.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:get/get_connect/http/src/utils/utils.dart';
import 'package:evote/components/candidate_desc_dummy.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Autogenerated {
  Data? data;
  Meta? meta;

  Autogenerated({this.data, this.meta});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    data = json['data'] != null ? new Data.fromJson(json['data']) : null;
    meta = json['meta'] != null ? new Meta.fromJson(json['meta']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.data != null) {
      data['data'] = this.data!.toJson();
    }
    if (this.meta != null) {
      data['meta'] = this.meta!.toJson();
    }
    return data;
  }
}

class Data {
  int? id;
  Attributes? attributes;

  Data({this.id, this.attributes});

  Data.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    attributes = json['attributes'] != null
        ? new Attributes.fromJson(json['attributes'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    if (this.attributes != null) {
      data['attributes'] = this.attributes!.toJson();
    }
    return data;
  }
}

class Attributes {
  String? startedDate;
  String? finishedDate;
  String? createdAt;
  String? updatedAt;
  String? publishedAt;
  String? nama;
  Calon? calon;

  Attributes(
      {this.startedDate,
      this.finishedDate,
      this.createdAt,
      this.updatedAt,
      this.publishedAt,
      this.nama,
      this.calon});

  Attributes.fromJson(Map<String, dynamic> json) {
    startedDate = json['started_date'];
    finishedDate = json['finished_date'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    publishedAt = json['publishedAt'];
    nama = json['Nama'];
    calon = json['calon'] != null ? new Calon.fromJson(json['calon']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['started_date'] = this.startedDate;
    data['finished_date'] = this.finishedDate;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['publishedAt'] = this.publishedAt;
    data['Nama'] = this.nama;
    if (this.calon != null) {
      data['calon'] = this.calon!.toJson();
    }
    return data;
  }
}

class Calon {
  List<DataCalon>? data;

  Calon({this.data});

  Calon.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      data = <DataCalon>[];
      json['data'].forEach((v) {
        data!.add(new DataCalon.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class DataCalon {
  int? id;
  AttributesCalon? attributes;

  DataCalon({this.id, this.attributes});

  DataCalon.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    attributes = json['attributes'] != null
        ? new AttributesCalon.fromJson(json['attributes'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    if (this.attributes != null) {
      data['attributes'] = this.attributes!.toJson();
    }
    return data;
  }
}

class AttributesCalon {
  String? nama;
  String? deskripsi;
  int? jumlahVote;
  String? createdAt;
  String? updatedAt;
  String? publishedAt;

  AttributesCalon(
      {this.nama,
      this.deskripsi,
      this.jumlahVote,
      this.createdAt,
      this.updatedAt,
      this.publishedAt});

  AttributesCalon.fromJson(Map<String, dynamic> json) {
    nama = json['Nama'];
    deskripsi = json['Deskripsi'];
    jumlahVote = json['Jumlah_vote'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    publishedAt = json['publishedAt'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['Nama'] = this.nama;
    data['Deskripsi'] = this.deskripsi;
    data['Jumlah_vote'] = this.jumlahVote;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['publishedAt'] = this.publishedAt;
    return data;
  }
}

class Meta {
  Meta();

  Meta.fromJson(Map<String, dynamic> json) {}

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    return data;
  }
}

class CandidateInfo extends StatefulWidget {
  late final int? choose;

  CandidateInfo(
      {required this.choose});
  @override
  _CandidateInfo createState() => _CandidateInfo();
}

class _CandidateInfo extends State<CandidateInfo> {
  List<DataCalon>? items = <DataCalon>[];
  var choose;
  var jumlah;
  
  Future get() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();

    String? stringValue = prefs.getString('email');
    int? intValue = prefs.getInt('id');
    var jsonResponse = null;
    final response = await http.get(
      Uri.parse("http://localhost:1337/api/votings/${widget.choose}?populate[0]=calon"),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
    );
    jsonResponse = (response.body);
    final test = Autogenerated.fromJson(json.decode(response.body));
    Map<Object, dynamic> user = jsonDecode(jsonResponse);

    if (user['data'].length == 0) {
      print("login not success");
    } else {
      print('${widget.choose}');
      print(stringValue);
      print(intValue);
      items = test.data?.attributes?.calon!.data;
      // print(jsonResponse.data[0].nama);
      // Navigator.pushReplacementNamed(context, '/');
    }
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
        child: FutureBuilder(
            future: get(),
            builder: (BuildContext context, AsyncSnapshot<dynamic> snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(
                  child: CircularProgressIndicator(),
                );
              } else {
                return Scaffold(
                  backgroundColor: Color(0xFF05304B),
                  body: Container(
                      child: Column(
                    children: [
                      Padding(padding: EdgeInsets.only(top: 50)),
                      Container(
                          width: 360,
                          height: 80,
                          child: Text("Pemilihan Ketua Himpunan",
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                  color: Colors.white, fontSize: 30))),
                      Padding(padding: EdgeInsets.only(top: 25)),
                      Center(
                          child: Container(
                        width: 360,
                        height: 460,
                        child: ListView.builder(
                          scrollDirection: Axis.horizontal,
                          itemCount: items?.length,
                          itemBuilder: (context, index) {
                            if (index < items!.length) {
                              final item = items?[index];
                              return listItem(item!);
                            } else {
                              return Text("X");
                            }
                          },
                        ),
                      )),
                      Padding(padding: EdgeInsets.only(top: 20)),
                      Container(
                        child: MaterialButton(
                          padding: EdgeInsets.all(10),
                          child: Container(
                            alignment: Alignment.center,
                            height: 40,
                            width: 160,
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10),
                                color: Color(0xFFFFCE3F)),
                            child: Text(
                              "Pilih Sekarang",
                              // '${widget.choose}',
                              style: TextStyle(
                                  fontSize: 18, fontWeight: FontWeight.w600),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          onPressed: () {
                            Navigator.pushReplacement(
                                  context,
                                  MaterialPageRoute(
                                      builder: (BuildContext context) =>
                                          CandidateChoose(choose: widget.choose)));
                          },
                        ),
                      )
                    ],
                  )),
                );
              }
            }));
  }

  Widget listItem(DataCalon item) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 7.5),
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 20),
        width: 320,
        height: 450,
        decoration: BoxDecoration(
            color: Colors.white30, borderRadius: BorderRadius.circular(25)),
        child: Column(
          children: [
            Padding(padding: EdgeInsets.only(top: 27)),
            Container(
              child: Container(
                height: 160,
                width: 160,
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.white, width: 3),
                  image: DecorationImage(
                      image: NetworkImage('assets/image/logo_real.png'),
                      fit: BoxFit.contain),
                ),
              ),
            ),
            Container(
                alignment: Alignment.center,
                height: 60,
                child: Text('${item.attributes!.nama}',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.white, fontSize: 26))),
            Container(
                height: 185,
                width: 330,
                alignment: Alignment.center,
                padding: EdgeInsets.all(20),
                decoration: BoxDecoration(
                    color: Color(0xFF0094B6),
                    borderRadius: BorderRadius.circular(25)),
                child: Text(
                  //MAX 300 CHARACTER
                  '${item.attributes!.deskripsi}',
                  style: TextStyle(color: Colors.white, fontSize: 13),
                )),
          ],
        ),
      ),
    );
  }
}
